---
# Install tasks file for ansible-role-nnt-agent

- name: "Test if tripwire_installed boolean variable is set correctly"
  ansible.builtin.assert:
    that:
      - tripwire_installed is defined
      - tripwire_installed is boolean
      - not tripwire_installed | bool
    quiet: yes
  when:
    - tripwire_installed is defined

- name: "Test if install boolean variable is set correctly"
  ansible.builtin.assert:
    that:
      - install is defined
      - install is boolean
    quiet: yes

- name: "Create software directory under root homedir, if it does not exist"
  ansible.builtin.file:
    path: "/root/software/nnt/"
    state: directory

- name: "Check if installer package already exist"
  ansible.builtin.stat:
    path: "/root/software/nnt/{{ package_name }}"
  register: package

- name: "Download installer package from local repository"
  ansible.builtin.get_url:
    url: "{{ software_url }}/{{ package_name }}"
    dest: "/root/software/nnt/"
    validate_certs: no
    mode: '0770'
  when:
    - not package.stat.exists | bool

- name: "Extract Debian packages from .ZIP file (apt)"
  ansible.builtin.unarchive:
    src: "/root/software/nnt/{{ package_name }}"
    dest: "/root/software/nnt/"
    remote_src: yes
  when:
    #- package_name.find(".zip") == -1
    - ansible_facts['pkg_mgr'] == 'apt'

- name: "Install package (yum)"
  ansible.builtin.yum:
    name: "/root/software/nnt/{{ package_name }}"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Install package (dnf)"
  ansible.builtin.dnf:
    name: "/root/software/nnt/{{ package_name }}"
    state: present
    disable_gpg_check: yes
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Install package (apt)"
  ansible.builtin.apt:
    deb: "/root/software/nnt/{{ item }}"
    state: present
  with_items:
    - "{{ packages }}"
  when:
    - ansible_facts['pkg_mgr'] == 'apt'

- name: "Set Facts for NNT configuration (RedHat)"
  ansible.builtin.set_fact:
    nnt_install: /opt/nnt/gen7agentcore
    nnt_config: /var/nnt/gen7agent.app.netcore
    config_script: configure-gen7agentcore.sh
  when:
    - ansible_facts['os_family'] == 'RedHat'

- name: "Set Facts for NNT configuration (Debian)"
  ansible.builtin.set_fact:
    nnt_install: /opt/nnt/gen7agent
    nnt_config: /var/nnt/gen7agent.service
    config_script: configure-gen7agent.sh
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: "Register Agent with Hub Host"
  ansible.builtin.shell:
    cmd: "./{{ config_script }} {{ hub_url }} {{ agent_username }} {{ agent_password }}"
  args:
    chdir: "{{ nnt_install }}"

- name: "Stop the Service Daemon"
  ansible.builtin.service:
    name: "{{ nnt_service }}"
    state: stopped
  when:
    - proxy | bool

- name: "Update NNT Config Script (Proxy Settings)"
  ansible.builtin.replace:
    path: "{{ nnt_config }}/HubDetails.xml"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  with_items:
    - regexp: '^..<UseDefaultProxy>false'
      replace: '  <UseDefaultProxy>true'
    - regexp: '^..<Proxy />'
      replace: '  <Proxy>{{ proxy_protocol }}://{{ proxy_host }}:{{ proxy_port }}</Proxy>'
  when:
    - proxy | bool

- name: "Cleanup NNT configuration logs"
  ansible.builtin.file:
    path: "{{ nnt_config }}/{{ item }}"
    state: absent
  with_items:
    - agent.id
    - events.db
    - MasterDevice.json
    - ProxiedDevices.json
    - rolling-log.txt
    - store.db
  when:
    - proxy | bool

- name: "Start the Service Daemon"
  ansible.builtin.service:
    name: "{{ nnt_service }}"
    state: started
  when:
    - proxy | bool