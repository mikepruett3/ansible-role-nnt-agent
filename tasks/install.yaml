---
# Install tasks file for ansible-role-nnt-agent

- name: "Test if install boolean variable is set correctly"
  ansible.builtin.assert:
    that:
      - install is defined
      - install is boolean
    quiet: yes

- name: "Create software directory under root homedir, if it does not exist"
  ansible.builtin.file:
    path: "/root/software/nnt/"
    state: directory

- name: "Check if installer package already exist"
  ansible.builtin.stat:
    path: "/root/software/nnt/{{ package_name }}"
  register: package

- name: "Download installer package from local repository"
  ansible.builtin.get_url:
    url: "{{ software_url }}/{{ package_name }}"
    dest: "/root/software/nnt/"
    validate_certs: no
    mode: '0770'
  when:
    - not package.stat.exists | bool

- name: "Install package (yum)"
  ansible.builtin.yum:
    name: "/root/software/nnt/{{ package_name }}"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Install package (dnf)"
  ansible.builtin.dnf:
    name: "/root/software/nnt/{{ package_name }}"
    state: present
    disable_gpg_check: yes
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Install package (apt)"
  ansible.builtin.apt:
    deb: "/root/software/nnt/{{ package_name }}"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'apt'

- name: "Check for NNT install directory"
  ansible.builtin.stat:
    path: /opt/nnt/gen7agentcore/
  register: result
  ignore_errors: true

- name: "Set Facts for NNT install directory"
  ansible.builtin.set_fact:
    nnt_install: /opt/nnt/gen7agentcore/
  when:
    - result.stat.exists
    - result.stat.isdir
    - result.failed is false

- name: "Register Agent with Hub Host"
  ansible.builtin.shell:
    cmd: |
      "{{ nnt_install }}/{{ config_script }}"
      "{{ hub_url }}"
      "{{ agent_username }}"
      "{{ agent_password }}"
      "{{ nnt_install }}/bin"
      ""
      ""
      ""
      "{{ use_proxy }}"
      "{{ proxy_protocol }}"
      "{{ proxy_host }}"

#- name: "Restart the Service (sysv)"
#  ansible.builtin.service:
#    name: "{{ nnt_service }}"
#    state: restarted
#  when:
#    - ansible_facts['service_mgr'] == 'sysv'

#- name: "Restart the Service (systemd)"
#  ansible.builtin.systemd_service:
#    name: "{{ nnt_service }}.service"
#    daemon_reload: true
#    state: restarted
#  when:
#    - ansible_facts['service_mgr'] == 'systemd'